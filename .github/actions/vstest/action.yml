name: VSTest Reusable Workflow

inputs:
  runsOn:
    required: true
    type: string
  dotnet-version:
    required: true
    type: string
  testSelector:
    required: true
    type: string
    default: "testAssemblies" # Default to testAssemblies
  testAssemblyVer2:
    required: true
    type: string # Required when testSelector = testAssemblies
  configuration:
    required: true
    type: string
  platform:
    required: false
    type: string
  code-coverage-enabled:
    required: false
    type: boolean
  test-run-title:
    required: false
    type: string
  run-in-parallel:
    required: false
    type: boolean
  testPlan:
    required: false
    type: string
  testSuite:
    required: false
    type: string
  testConfiguration:
    required: false
    type: string
  tcmTestRun:
    required: false
    type: string
  uiTests:
    required: false
    type: boolean
  vsTestVersion:
    required: false
    type: string
  vstestLocation:
    required: false
    type: string
  diagnosticsEnabled:
    required: false
    type: boolean
  rerunFailedTests:
    required: false
    type: boolean
  rerunType:
    required: false
    type: string
  rerunMaxAttempts:
    required: false
    type: string
  dontDistribute:
    required: false
    type: boolean

runs:
  using: 'composite'
  steps:
    - name: Restore dependencies
      shell: pwsh
      run: dotnet restore

    - name: Build solution
      shell: pwsh
      run: dotnet build --configuration ${{ inputs.configuration }} --no-restore

    - name: Debug Directory Structure
      shell: pwsh
      run: |
        # Debug: List all files in the working directory
        $workingDirectory = "${{ github.workspace }}"
        Set-Location -Path $workingDirectory
        Write-Host "Listing all files in the working directory:"
        Get-ChildItem -Path $workingDirectory -Recurse | ForEach-Object { Write-Host $_.FullName }

    - name: Run tests with Visual Studio Test Runner
      shell: pwsh
      run: |
        # Ensure the correct working directory
        $workingDirectory = "${{ github.workspace }}"
        Set-Location -Path $workingDirectory

        # Convert inputs to boolean
        $codeCoverageEnabled = [bool]${{ inputs.code-coverage-enabled }}
        $runInParallel = [bool]${{ inputs.run-in-parallel }}
        $diagnosticsEnabled = [bool]${{ inputs.diagnosticsEnabled }}
        $rerunFailedTests = [bool]${{ inputs.rerunFailedTests }}

        # Check if testSelector is testAssemblies
        if ("${{ inputs.testSelector }}" -eq "testAssemblies") {
          # Resolve test assemblies from the bin directory
          $testAssemblies = Get-ChildItem -Path $workingDirectory -Recurse -File | Where-Object { $_.FullName -match "bin/.*/${{ inputs.configuration }}/.*${{ inputs.testAssemblyVer2 }}" } | ForEach-Object { $_.FullName }
          if (-not $testAssemblies) {
            Write-Error "No test assemblies found matching the pattern '${{ inputs.testAssemblyVer2 }}'."
            exit 1
          }

          # Debug: List resolved test assemblies
          Write-Host "Resolved test assemblies:"
          $testAssemblies | ForEach-Object { Write-Host $_ }

          # Construct VSTest arguments
          $vstestArgs = @()
          if ($codeCoverageEnabled) { $vstestArgs += '/EnableCodeCoverage' }
          if ($runInParallel) { $vstestArgs += '/Parallel' }
          if ($diagnosticsEnabled) { $vstestArgs += '/Diag:logfile.txt' }
          if ($rerunFailedTests) { $vstestArgs += "/Rerun:${{ inputs.rerunType }}" }

          # Run VSTest for each resolved test assembly
          foreach ($testAssembly in $testAssemblies) {
            $command = "${{ inputs.vstestLocation }} `"$testAssembly`" /Settings:TestSettings.runsettings $($vstestArgs -join ' ')"
            Write-Host "Executing: $command"
            Invoke-Expression $command
          }
        } else {
          Write-Error "Unsupported testSelector '${{ inputs.testSelector }}'. Only 'testAssemblies' is supported in this workflow."
          exit 1
        }
